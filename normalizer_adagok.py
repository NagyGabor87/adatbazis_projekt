import pandas as pd
import os
from datetime import datetime


def calculate_time_difference(start_date, start_time, end_date, end_time):
    """Id≈ëk√ºl√∂nbs√©g sz√°m√≠t√°sa percekben"""
    start_str = f"{start_date} {start_time}"
    end_str = f"{end_date} {end_time}"

    start_dt = datetime.strptime(start_str, '%Y.%m.%d %H:%M:%S')
    end_dt = datetime.strptime(end_str, '%Y.%m.%d %H:%M:%S')

    diff_minutes = (end_dt - start_dt).total_seconds() / 60
    return int(diff_minutes)  # Eg√©sz percekben


def normalize_adagok(df):
    """Adagok NF3 normaliz√°l√°sa 3 t√°bl√°ra - MINIMALIZ√ÅLT"""
    print("  Adagok NF3 normaliz√°l√°sa (3 t√°bla - minimaliz√°lt)...")

    # 1. T√°bla: Kezdet adagok
    kezdet_adagok = df[['ADAGSZ√ÅM', 'Kezdet_D√ÅTUM', 'Kezdet_ID≈ê']].copy()
    kezdet_adagok = kezdet_adagok.drop_duplicates(subset=['ADAGSZ√ÅM'])

    # 2. T√°bla: V√©ge adatok
    vege_adatok = df[['ADAGSZ√ÅM', 'V√©ge_D√ÅTUM', 'V√©ge_ID≈ê']].copy()

    # 3. T√°bla: Id≈ë ellen≈ërz√©s - CSAK A L√âNYEGES OSZLOPOK
    ido_ellenorzes_data = []
    hiba_count = 0

    for _, row in df.iterrows():
        # Adagid≈ë sz√°m√≠t√°sa
        szamitott_adagido = calculate_time_difference(
            row['Kezdet_D√ÅTUM'], row['Kezdet_ID≈ê'],
            row['V√©ge_D√ÅTUM'], row['V√©ge_ID≈ê']
        )

        # CRC hiba ellen≈ërz√©s
        crc_error = abs(szamitott_adagido - row['ADAGID≈ê']) > 1

        if crc_error:
            hiba_count += 1

        ido_ellenorzes_data.append({
            'ADAGSZ√ÅM': row['ADAGSZ√ÅM'],
            '√ñr√∂k√∂lt_ADAGID≈ê': row['ADAGID≈ê'],
            'Sz√°m√≠tott_ADAGID≈ê': szamitott_adagido,
            'CRC_Error': crc_error
        })

    ido_ellenorzes = pd.DataFrame(ido_ellenorzes_data)

    # Hibajelz√©s a konzolon
    if hiba_count > 0:
        print(f"  ‚ö†Ô∏è  FIGYELMEZTET√âS: {hiba_count} CRC hiba tal√°lhat√≥!")
        print("  Hib√°s adagok:")
        for _, hiba in ido_ellenorzes[ido_ellenorzes['CRC_Error'] == True].iterrows():
            print(
                f"    Adag {hiba['ADAGSZ√ÅM']}: √ñr√∂k√∂lt={hiba['√ñr√∂k√∂lt_ADAGID≈ê']} vs Sz√°m√≠tott={hiba['Sz√°m√≠tott_ADAGID≈ê']}")
    else:
        print("  ‚úÖ Minden adagid≈ë pontos!")

    return {
        'kezdet_adagok_NFdone': kezdet_adagok,
        'vege_adatok_NFdone': vege_adatok,
        'ido_ellenorzes_NFdone': ido_ellenorzes
    }, hiba_count


def normalize_adagok_with_prompt(df, output_dir, source_filename):
    """Adagok normaliz√°l√°sa felhaszn√°l√≥i interakci√≥val"""
    normalized_tables, hiba_count = normalize_adagok(df)

    # Ha nincs hiba, k√©rdezz√ºk meg, tartsuk-e az ellen≈ërz≈ë t√°bl√°t
    if hiba_count == 0:
        print(f"\nüí° K√âRD√âS: Minden adagid≈ë pontos ({len(normalized_tables['ido_ellenorzes_NFdone'])} adag)")
        response = input("   Megtartsam az ellen≈ërz≈ë t√°bl√°t t√°j√©koztat√°s c√©lj√°b√≥l? (i/n): ").strip().lower()

        if response != 'i':
            # T√°bla t√∂rl√©se
            del normalized_tables['ido_ellenorzes_NFdone']
            print("   ‚úÖ Ellen≈ërz≈ë t√°bla t√∂r√∂lve")
        else:
            print("   ‚úÖ Ellen≈ërz≈ë t√°bla megmarad")

    # F√°jlok ment√©se
    for table_name, table_data in normalized_tables.items():
        output_path = os.path.join(output_dir, f"{table_name}.csv")
        table_data.to_csv(output_path, index=False, sep=';', encoding='utf-8-sig')
        print(f"  üíæ {table_name}.csv ({len(table_data)} sor)")

    return len(normalized_tables)


def process_adagok_file(input_file_path, output_dir):
    """Adagok f√°jl feldolgoz√°sa"""
    filename = os.path.basename(input_file_path)
    print(f"üéØ ADAGOK NF3: {filename}")

    # Beolvas√°s
    df = pd.read_csv(input_file_path, delimiter=';', encoding='utf-8-sig')

    # Normaliz√°l√°s
    return normalize_adagok_with_prompt(df, output_dir, filename)
