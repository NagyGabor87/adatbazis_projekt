import os
import pandas as pd
import chardet


def decode_csv_file(input_file_path: str, output_dir: str) -> str:
    """
    CSV f√°jl dek√≥dol√°sa √©s ment√©se UTF-8-BOM form√°tumban
    """

    if not os.path.exists(input_file_path):
        print(f"‚úó A f√°jl nem tal√°lhat√≥: {input_file_path}")
        return ""

    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Kimeneti f√°jln√©v gener√°l√°sa
    original_filename = os.path.basename(input_file_path)
    name_without_ext = os.path.splitext(original_filename)[0]
    output_filename = f"{name_without_ext}_decoded.csv"
    output_file_path = os.path.join(output_dir, output_filename)

    print(f"üì• Bemeneti: {original_filename}")
    print(f"üì§ Kimeneti: {output_filename}")

    # 1. K√≥dol√°s automatikus felismer√©se
    print("\n1. K√≥dol√°s automatikus felismer√©se...")
    detected_encoding, confidence = detect_encoding_with_chardet(input_file_path)

    if detected_encoding:
        print(f"‚úì Automatikus felismer√©s: {detected_encoding}")
        print(f"üìä Megb√≠zhat√≥s√°g: {confidence:.1%}")

        # Megjelen√≠tj√ºk az automatikusan felismert k√≥dol√°s adatait
        print(f"\nAutomatikusan felismert k√≥dol√°s adatai:")
        show_file_preview(input_file_path, detected_encoding)

        # D√ñNT√âSI PONT: 99%+ megb√≠zhat√≥s√°g eset√©n automatikusan elfogadjuk
        if confidence >= 0.99:
            print("üéØ 99%+ megb√≠zhat√≥s√°g ‚Üí automatikus elfogad√°s")
            selected_encoding = detected_encoding
        else:
            print(f"‚ö†Ô∏è  Alacsony megb√≠zhat√≥s√°g ({confidence:.1%}) ‚Üí k√©zi v√°laszt√°s sz√ºks√©ges")
            response = input("\nSzeretn√©d haszn√°lni az automatikusan felismert k√≥dol√°st? (i/n): ").strip().lower()

            if response == 'i':
                print("‚ùå MEGSZAK√çTVA: Alacsony megb√≠zhat√≥s√°g miatt a tov√°bbi feldolgoz√°s hib√°s lehet!")
                print("üö™ Program le√°ll...")
                exit(1)
            else:
                selected_encoding = select_encoding_manual(input_file_path)
    else:
        print("‚úó Automatikus felismer√©s sikertelen, k√©zi v√°laszt√°s...")
        selected_encoding = select_encoding_manual(input_file_path)

    if not selected_encoding:
        return ""

    # 2. Adatok beolvas√°sa kiv√°lasztott k√≥dol√°ssal
    print(f"\n2. Adatok beolvas√°sa {selected_encoding} k√≥dol√°ssal...")
    try:
        df = pd.read_csv(input_file_path, delimiter=';', encoding=selected_encoding)
        print(f"‚úì Beolvasva: {len(df)} sor, {len(df.columns)} oszlop")

        # Adatok el≈ën√©zete
        print("\nAdatok el≈ën√©zete:")
        print(f"Oszlopnevek: {list(df.columns)}")
        if len(df) > 0:
            print(f"Els≈ë sor: {df.iloc[0].tolist()}")

    except Exception as e:
        print(f"‚úó Hiba a beolvas√°s sor√°n: {e}")
        return ""

    # 3. Ment√©s UTF-8-SIG k√≥dol√°ssal
    try:
        df.to_csv(output_file_path, index=False, sep=';', encoding='utf-8-sig')
        print(f"\n‚úì Adatok export√°lva: {output_file_path}")
        print(f"   V√©geredm√©ny: {len(df)} sor, {len(df.columns)} oszlop")
        print(f"   K√≥dol√°s: UTF-8-BOM (Excel kompatibilis)")
        return output_file_path

    except Exception as e:
        print(f"‚úó Hiba az export√°l√°s sor√°n: {e}")
        return ""


def detect_encoding_with_chardet(input_file: str):
    """K√≥dol√°s automatikus felismer√©se chardet k√∂nyvt√°rral"""
    try:
        with open(input_file, 'rb') as file:
            raw_data = file.read(50000)

        result = chardet.detect(raw_data)
        encoding = result['encoding']
        confidence = result['confidence']

        # K√≥dol√°s normaliz√°l√°sa
        encoding = normalize_encoding_name(encoding)

        if confidence > 0.6:
            try:
                pd.read_csv(input_file, delimiter=';', encoding=encoding, nrows=2)
                return encoding, confidence
            except:
                return "", 0
        else:
            return "", 0

    except Exception as e:
        print(f"   Hiba: {e}")
        return "", 0


def normalize_encoding_name(encoding: str) -> str:
    """K√≥dol√°s nevek normaliz√°l√°sa"""
    encoding_map = {
        'ISO-8859-2': 'latin2',
        'ISO-8859-1': 'latin1',
        'Windows-1250': 'cp1250',
        'Windows-1252': 'cp1252',
        'UTF-8-SIG': 'utf-8-sig'
    }
    return encoding_map.get(encoding, encoding)


def show_file_preview(input_file: str, encoding: str) -> None:
    """F√°jl el≈ën√©zet megjelen√≠t√©se adott k√≥dol√°ssal"""
    try:
        df_preview = pd.read_csv(input_file, delimiter=';', encoding=encoding, nrows=3)
        print(f"Oszlopnevek: {list(df_preview.columns)}")
        if len(df_preview) > 0:
            print(f"Els≈ë sor: {df_preview.iloc[0].tolist()}")
        print("‚úì Az adatok helyesen megjelen√≠thet≈ëk ezzel a k√≥dol√°ssal")
    except Exception as e:
        print(f"‚úó Hiba az el≈ën√©zet megjelen√≠t√©se sor√°n: {e}")


def select_encoding_manual(input_file: str) -> str:
    """K√≥dol√°s k√©zi kiv√°laszt√°sa a felhaszn√°l√≥ √°ltal"""

    encodings = ['latin2', 'cp852', 'cp1250', 'utf-8']
    working_encodings = []

    print("\nüß© K√©zi k√≥dol√°s kiv√°laszt√°sa...\n")

    for encoding in encodings:
        try:
            # Csak az els≈ë n√©h√°ny sor beolvas√°sa tesztel√©shez
            df_test = pd.read_csv(input_file, delimiter=';', encoding=encoding, nrows=3)
            working_encodings.append(encoding)

            print(f"=== {encoding} ===")
            print(f"Fejl√©c: {list(df_test.columns)}")
            if len(df_test) > 0:
                print(f"1. sor: {df_test.iloc[0].tolist()}")
            print("‚úì M≈∞K√ñDIK\n")

        except Exception as e:
            print(f"=== {encoding} ===")
            print(f"‚úó NEM M≈∞K√ñDIK - {str(e)[:60]}\n")

    if not working_encodings:
        print("‚ùå Egyik k√≥dol√°s sem m≈±k√∂dik!")
        return ""

    # V√°laszt√°s
    print("M≈±k√∂d≈ë k√≥dol√°sok:")
    for i, encoding in enumerate(working_encodings, 1):
        print(f"  {i}. {encoding}")
    print(f"  {len(working_encodings) + 1}. ‚ùå Manu√°lisan oldom meg (kil√©p√©s)")

    # Input k√≠v√ºl a try-except blokkon
    choice_input = input(f"\nV√°lassz k√≥dol√°st (1-{len(working_encodings) + 1}): ").strip()

    # Ellen≈ërizz√ºk, hogy sz√°m-e
    if not choice_input.isdigit():
        print("‚ùå √ârv√©nytelen v√°laszt√°s! Csak sz√°mot adj meg.")
        print("üö™ Program le√°ll...")
        exit(1)

    choice = int(choice_input)

    if choice == len(working_encodings) + 1:
        print("\n‚ùå KIL√âP√âS: Felhaszn√°l√≥ manu√°lis megold√°st v√°lasztott")
        print("üö™ Program le√°ll...")
        exit(1)

    if 1 <= choice <= len(working_encodings):
        return working_encodings[choice - 1]
    else:
        print("‚ùå √ârv√©nytelen v√°laszt√°s!")
        print("üö™ Program le√°ll...")
        exit(1)
