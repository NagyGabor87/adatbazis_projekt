import os
import pandas as pd
import chardet


def decode_csv_file(input_file_path: str, output_dir: str) -> str:
    """
    CSV f√°jl dek√≥dol√°sa √©s ment√©se UTF-8-BOM form√°tumban

    Args:
        input_file_path: A bemeneti CSV f√°jl teljes √∫tvonala
        output_dir: A kimeneti k√∂nyvt√°r √∫tvonala

    Returns:
        Az export√°lt f√°jl √∫tvonala, vagy √ºres string hiba eset√©n
    """

    # F√°jl ellen≈ërz√©se
    if not os.path.exists(input_file_path):
        print(f"‚úó A megadott f√°jl nem tal√°lhat√≥: {input_file_path}")
        return ""

    # Kimeneti k√∂nyvt√°r ellen≈ërz√©se √©s l√©trehoz√°sa
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)
        print(f"‚úì Kimeneti k√∂nyvt√°r l√©trehozva: {output_dir}")

    # Kimeneti f√°jln√©v gener√°l√°sa
    original_filename = os.path.basename(input_file_path)
    name_without_ext = os.path.splitext(original_filename)[0]
    output_filename = f"{name_without_ext}_decoded.csv"
    output_file_path = os.path.join(output_dir, output_filename)

    print(f"Bemeneti f√°jl: {input_file_path}")
    print(f"Kimeneti f√°jl: {output_file_path}")

    # 1. L√©p√©s: K√≥dol√°s automatikus felismer√©se chardet-tel
    print("\n1. K√≥dol√°s automatikus felismer√©se...")
    detected_encoding = detect_encoding_with_chardet(input_file_path)

    if detected_encoding:
        print(f"‚úì Automatikus felismer√©s: {detected_encoding}")

        # Megjelen√≠tj√ºk az automatikusan felismert k√≥dol√°s adatait
        print(f"\nAutomatikusan felismert k√≥dol√°s adatai:")
        show_file_preview(input_file_path, detected_encoding)

        use_auto = input("\nSzeretn√©d haszn√°lni az automatikusan felismert k√≥dol√°st? (i/n): ").strip().lower()
        if use_auto == 'i':
            selected_encoding = detected_encoding
        else:
            selected_encoding = select_encoding_manual(input_file_path)
    else:
        print("‚úó Automatikus felismer√©s sikertelen, k√©zi v√°laszt√°s...")
        selected_encoding = select_encoding_manual(input_file_path)

    if not selected_encoding:
        print("‚úó Nem siker√ºlt k√≥dol√°st kiv√°lasztani")
        return ""

    # 2. L√©p√©s: Adatok beolvas√°sa kiv√°lasztott k√≥dol√°ssal
    print(f"\n2. Adatok beolvas√°sa {selected_encoding} k√≥dol√°ssal...")
    try:
        df = pd.read_csv(input_file_path, delimiter=';', encoding=selected_encoding)
        print(f"‚úì Beolvasva: {len(df)} sor, {len(df.columns)} oszlop")

        # Adatok el≈ën√©zete
        print("\nAdatok el≈ën√©zete:")
        print(f"Oszlopnevek: {list(df.columns)}")
        if len(df) > 0:
            print(f"Els≈ë sor: {df.iloc[0].tolist()}")

    except Exception as e:
        print(f"‚úó Hiba a beolvas√°s sor√°n: {e}")
        return ""

    # 3. L√©p√©s: Ment√©s UTF-8-SIG k√≥dol√°ssal (Excel kompatibilis)
    try:
        df.to_csv(output_file_path, index=False, sep=';', encoding='utf-8-sig')
        print(f"\n‚úì Adatok export√°lva: {output_file_path}")
        print(f"   V√©geredm√©ny: {len(df)} sor, {len(df.columns)} oszlop")
        print(f"   K√≥dol√°s: UTF-8-BOM (Excel kompatibilis)")
        return output_file_path

    except Exception as e:
        print(f"‚úó Hiba az export√°l√°s sor√°n: {e}")
        return ""


def detect_encoding_with_chardet(input_file: str) -> str:
    """K√≥dol√°s automatikus felismer√©se chardet k√∂nyvt√°rral"""
    try:
        with open(input_file, 'rb') as file:
            # Az els≈ë 10KB-b√≥l pr√≥b√°lja meg√°llap√≠tani a k√≥dol√°st
            raw_data = file.read(10000)

        result = chardet.detect(raw_data)
        encoding = result['encoding']
        confidence = result['confidence']

        print(f"   Felismert k√≥dol√°s: {encoding}")
        print(f"   Megb√≠zhat√≥s√°g: {confidence:.1%}")

        # Csak akkor fogadjuk el, ha el√©g magas a megb√≠zhat√≥s√°g
        if confidence > 0.7:
            # Ellen≈ërizz√ºk, hogy t√©nyleg m≈±k√∂dik-e
            try:
                pd.read_csv(input_file, delimiter=';', encoding=encoding, nrows=2)
                return encoding
            except:
                print(f"   A felismert k√≥dol√°s nem m≈±k√∂dik a pandas-szal")
                return ""
        else:
            print("   A megb√≠zhat√≥s√°g t√∫l alacsony")
            return ""

    except Exception as e:
        print(f"   Hiba a chardet haszn√°lata sor√°n: {e}")
        return ""


def show_file_preview(input_file: str, encoding: str) -> None:
    """F√°jl el≈ën√©zet megjelen√≠t√©se adott k√≥dol√°ssal"""
    try:
        df_preview = pd.read_csv(input_file, delimiter=';', encoding=encoding, nrows=3)
        print(f"Oszlopnevek: {list(df_preview.columns)}")
        if len(df_preview) > 0:
            print(f"Els≈ë sor: {df_preview.iloc[0].tolist()}")
        print("‚úì Az adatok helyesen megjelen√≠thet≈ëk ezzel a k√≥dol√°ssal")
    except Exception as e:
        print(f"‚úó Hiba az el≈ën√©zet megjelen√≠t√©se sor√°n: {e}")


def select_encoding_manual(input_file: str) -> str:
    """K√≥dol√°s k√©zi kiv√°laszt√°sa a felhaszn√°l√≥ √°ltal"""

    encodings = ['latin2', 'cp852', 'cp1250', 'utf-8']
    working_encodings = []

    print("\nK√©zi k√≥dol√°s kiv√°laszt√°sa...\n")

    for encoding in encodings:
        try:
            # Csak az els≈ë n√©h√°ny sor beolvas√°sa tesztel√©shez
            df_test = pd.read_csv(input_file, delimiter=';', encoding=encoding, nrows=3)
            working_encodings.append(encoding)

            print(f"=== {encoding} ===")
            print(f"Fejl√©c: {list(df_test.columns)}")
            if len(df_test) > 0:
                print(f"1. sor: {df_test.iloc[0].tolist()}")
            print("‚úì M≈∞K√ñDIK\n")

        except Exception as e:
            print(f"=== {encoding} ===")
            print(f"‚úó NEM M≈∞K√ñDIK - {str(e)[:60]}\n")

    if not working_encodings:
        print("Egyik k√≥dol√°s sem m≈±k√∂dik!")
        return ""

    # V√°laszt√°s
    print("M≈±k√∂d≈ë k√≥dol√°sok:")
    for i, encoding in enumerate(working_encodings, 1):
        print(f"  {i}. {encoding}")

    try:
        choice = int(input(f"\nV√°lassz k√≥dol√°st (1-{len(working_encodings)}): "))
        return working_encodings[choice - 1]
    except:
        print("√ârv√©nytelen v√°laszt√°s!")
        return ""


def main() -> None:
    """F≈ëprogram - p√©lda haszn√°latra"""

    # P√©lda haszn√°lat - megtartva az eredeti √∫tvonalakat
    current_dir = os.path.dirname(os.path.abspath(__file__))
    root_dir = os.path.dirname(current_dir)

    input_file = os.path.join(root_dir, 'import', 'Adagok.csv')
    export_dir = os.path.join(root_dir, 'temp')

    if os.path.exists(input_file):
        result = decode_csv_file(input_file, export_dir)
        if result:
            print(f"\nüéâ Sikeres dek√≥dol√°s: {result}")
        else:
            print(f"\n‚ùå A dek√≥dol√°s sikertelen")
    else:
        print(f"‚úó A p√©lda f√°jl nem tal√°lhat√≥: {input_file}")
        print("\nHaszn√°lat m√°s f√°jlokkal:")
        print("decode_csv_file('c:/utvonal/bemeneti.csv', 'c:/utvonal/kimeneti_mappa')")


if __name__ == "__main__":
    main()
