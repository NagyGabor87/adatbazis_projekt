import pandas as pd
import os


def clean_file(input_file_path: str, output_dir: str) -> str:
    """
    F√°jltiszt√≠t√≥ - a main.py sz√°m√°ra optimaliz√°lva

    Args:
        input_file_path: A bemeneti f√°jl teljes √∫tvonala
        output_dir: A kimeneti mappa √∫tvonala

    Returns:
        str: A kimeneti f√°jl √∫tvonala, vagy √ºres string hiba eset√©n
    """

    try:
        # Kimeneti f√°jl neve (_clean hozz√°ad√°s√°val)
        original_filename = os.path.basename(input_file_path)
        name, ext = os.path.splitext(original_filename)
        output_filename = f"{name}_clean{ext}"
        output_file_path = os.path.join(output_dir, output_filename)

        # Kimeneti mappa l√©trehoz√°sa ha nem l√©tezik
        if not os.path.exists(output_dir):
            os.makedirs(output_dir)
            print(f"‚úÖ Kimeneti mappa l√©trehozva: {output_dir}")

        # F√°jl beolvas√°sa
        df = pd.read_csv(input_file_path, delimiter=';', encoding='utf-8-sig')

        print(f"üì• F√°jl beolvasva: {original_filename}")
        print(f"üìä Eredeti adatok: {len(df)} sor, {len(df.columns)} oszlop")

        # EGYSZER≈∞ TISZT√çT√ÅS
        df_clean = (df
                    .copy()
                    .drop_duplicates()  # Duplik√°lt sorok elt√°vol√≠t√°sa
                    .dropna(how='all')  # Teljesen √ºres sorok
                    .fillna('')  # Hi√°nyz√≥ √©rt√©kek helyettes√≠t√©se
                    .rename(columns=lambda x: x.strip())  # Oszlopnevek tiszt√≠t√°sa
                    )

        # Sz√∂veges oszlopok automatikus tiszt√≠t√°sa
        text_cols = df_clean.select_dtypes(include=['object']).columns
        df_clean[text_cols] = df_clean[text_cols].apply(lambda x: x.str.strip())

        # Ment√©s Excel kompatibilis form√°tumban
        df_clean.to_csv(output_file_path, index=False, sep=';', encoding='utf-8-sig')

        print(f"‚úÖ Tiszt√≠tott f√°jl: {output_file_path}")
        print(f"‚úÖ Tiszt√≠tott adatok: {len(df_clean)} sor, {len(df_clean.columns)} oszlop")

        return output_file_path

    except Exception as e:
        print(f"‚ùå Hiba a tiszt√≠t√°s sor√°n: {e}")
        return ""


def clean_file_with_fallback(input_file_path: str, output_dir: str) -> str:
    """
    F√°jltiszt√≠t√≥ alternat√≠v k√≥dol√°sok kipr√≥b√°l√°s√°val
    """
    encodings = ['utf-8-sig', 'utf-8', 'latin2', 'cp1250', 'cp852']

    for encoding in encodings:
        try:
            print(f"üîç K√≠s√©rlet {encoding} k√≥dol√°ssal...")
            df = pd.read_csv(input_file_path, delimiter=';', encoding=encoding)

            # Ha siker√ºlt beolvasni, folytatjuk a tiszt√≠t√°ssal
            original_filename = os.path.basename(input_file_path)
            name, ext = os.path.splitext(original_filename)
            output_filename = f"{name}_clean{ext}"
            output_file_path = os.path.join(output_dir, output_filename)

            if not os.path.exists(output_dir):
                os.makedirs(output_dir)

            df_clean = (df
                        .copy()
                        .drop_duplicates()
                        .dropna(how='all')
                        .fillna('')
                        .rename(columns=lambda x: x.strip())
                        )

            text_cols = df_clean.select_dtypes(include=['object']).columns
            df_clean[text_cols] = df_clean[text_cols].apply(lambda x: x.str.strip())

            df_clean.to_csv(output_file_path, index=False, sep=';', encoding='utf-8-sig')
            print(f"‚úÖ Sikeres tiszt√≠t√°s {encoding} k√≥dol√°ssal")
            return output_file_path

        except Exception as e:
            print(f"‚ùå {encoding} nem m≈±k√∂dik: {str(e)[:50]}...")
            continue

    print("‚ùå Egyik k√≥dol√°s sem m≈±k√∂d√∂tt!")
    return ""


if __name__ == "__main__":
    # Teszt a cleaning.py f√°jllal
    current_dir = os.path.dirname(os.path.abspath(__file__))
    root_dir = os.path.dirname(current_dir)

    temp_dir = os.path.join(root_dir, 'temp')
    export_dir = os.path.join(root_dir, 'export')

    # Tesztelj√ºk az els≈ë CSV f√°jlt a temp mapp√°b√≥l
    csv_files = [f for f in os.listdir(temp_dir) if f.endswith('.csv')]

    if csv_files:
        test_file = os.path.join(temp_dir, csv_files[0])
        print(f"üß™ Tesztel√©s: {test_file}")
        result = clean_file(test_file, export_dir)
        if result:
            print("üéâ Teszt sikeres!")
        else:
            print("üí• Teszt sikertelen!")
    else:
        print("‚ÑπÔ∏è  Nincs tesztelhet≈ë f√°jl a temp mapp√°ban")
